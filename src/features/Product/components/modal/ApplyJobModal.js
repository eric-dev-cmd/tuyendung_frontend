import React, {
  Fragment,
  useContext,
  useEffect,
  useRef,
  useState,
} from "react";
import PropTypes from "prop-types";
import { Button, Checkbox, Input, Modal, Tag } from "antd";
import TextArea from "antd/lib/input/TextArea";
import { ProfileContext } from "../../../../context/ProfileContextProvider";
import { AiFillEdit } from "react-icons/ai";
import { useParams } from "react-router-dom";
import { getUserProfile } from "../../../../utils/localStorage";
import profileApi from "../../../../services/profileApi";
import { toast } from "react-toastify";
import { RadioButton } from "../../../../components/RadioButton/RadioButton";
import "./styles.scss";
import isEmpty from "validator/lib/isEmpty";
import isEmail from "validator/lib/isEmail";
const ApplyJobModal = ({
  showModal,
  onCloseModal,
  isEdit,
  isShowOptionApply,
  ...props
}) => {
  const [isEntered, setIsEntered] = useState(false);
  const [name, setName] = useState(props?.user?.ten);
  const [phone, setPhone] = useState(props?.user?.sdt);
  const [email, setEmail] = useState(props?.user?.taiKhoan?.email);
  const [introduce, setIntroduce] = useState(props?.user?.loiGioiThieu);
  const [isSendEmail, setIsSendEmail] = useState(false);
  const [applyUser, setApplyUser] = useState({});
  const [isShowButtonGD1, setIsShowButtonGD1] = useState(true);
  const [isShowNextPage2, setIsShowNextPage2] = useState(true);
  const [isShowApply, setIsShowApply] = useState(true);
  const [cvMethod, setCvMethod] = useState(0);
  // X·ª≠ l√Ω file upload
  const [file, setFile] = useState();
  const inputFile = useRef(null);
  const params = useParams();
  const { slug } = params;
  console.log(" modal isEdit", isEdit);
  const accountUser = getUserProfile();
  const uniqueId = accountUser.taiKhoan._id;
  const [isDisabled, setIsDisabled] = useState(false);
  const [validationMsg, setValidationMsg] = useState("");

  const validateAll = () => {
    const msg = {};
    if (isEmpty(name)) {
      msg.name = "Vui l√≤ng nh·∫≠p t√™n c·ªßa b·∫°n";
    }
    if (isEmpty(phone)) {
      msg.phone = "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i c·ªßa b·∫°n";
    }
    if (isEmpty(email)) {
      msg.email = "Vui l√≤ng nh·∫≠p email c·ªßa b·∫°n";
    } else if (!isEmail(email)) {
      msg.email = "Vui l√≤ng nh·∫≠p email h·ª£p l·ªá";
    }
    setValidationMsg(msg);
    if (Object.keys(msg).length > 0) return false;
    return true;
  };

  const nextPage = () => {
    const isValid = validateAll();
    if (!isValid) {
      return;
    }
    setIsEntered(true);
  };
  const nextPage2 = () => {
    if (cvMethod) {
      console.log("Ch·ªçn");
      setIsDisabled(false);
    } else {
      console.log("Kh√¥ng Ch·ªçn");
      setIsDisabled(true);
      return;
    }
    setIsShowNextPage2(false);
    setIsShowButtonGD1(false);
    setIsShowApply(false);
    setIsEntered(false);
  };

  const save = () => {
    const payload = {
      ungTuyenVien: uniqueId,
      tinTuyenDung: slug,
      guiEmail: isSendEmail,
      thongTinLienHe: {
        ten: name,
        sdt: phone,
        email: email,
        loiGioiThieu: introduce,
      },
      phuongThuc: cvMethod === "1" ? true : false,
      cv: file?.name || null,
    };
    console.log(
      "üöÄ ~ file: ApplyJobModal.js ~ line 57 ~ save ~ payload",
      payload
    );

    onSubmitApplyJob(payload, file);
  };
  const onSubmitApplyJob = (payload, file) => {
    props.onSubmit(payload, file);
    onCloseModal();
  };
  const [user, setUser] = useState(props?.user);

  useEffect(() => {
    const getProfileDetail = async () => {
      try {
        const response = await profileApi.getUngTuyenVien(uniqueId);
        setUser(response?.data);
      } catch (error) {
        toast.error(error, {
          position: "bottom-right",
          autoClose: 1000,
          hideProgressBar: false,
          closeOnClick: true,
          pauseOnHover: true,
          draggable: true,
          progress: undefined,
        });
      }
    };
    getProfileDetail();
  }, []);

  const radioChangeHandler = (e) => {
    const value = e.target.value;
    setCvMethod(value);
  };
  const [isShowFileName, setIsShowFileName] = useState(false);
  const [isHideButton, setIsHideButton] = useState(true);
  const handleChange = (e) => {
    if (e.target.files[0]) {
      const file = e.target.files[0];
      setFile(file);
      setIsShowFileName(true);
      setIsHideButton(false);
    } else {
      alert("Khong co file");
    }
  };
  return (
    <div>
      <Modal
        title="Li√™n h·ªá v·ªõi t√¥i"
        centered
        visible={showModal}
        onCancel={() => {
          onCloseModal(false);
        }}
        className="mt-78"
        // width={800}
        footer={[
          <Button
            key="back"
            onClick={() => {
              console.log("Cancel");
              // setIsShowButtonGD1(false)
              if (isShowButtonGD1) {
                setIsShowApply(true);
                setIsShowButtonGD1(false);
                onCloseModal(false);
                setIsEntered(false);
              } else if (isEntered) {
                setIsShowApply(false);
                setIsEntered(false);
                setIsShowButtonGD1(false);
              } else if (!isEntered) {
                setIsShowApply(true);
                setIsEntered(false);
                setIsShowButtonGD1(true);
                setIsShowNextPage2(true);
              } else {
                // setIsEntered(false)
              }
            }}
          >
            {isShowButtonGD1 && <span>Quay l·∫°i t√¨m vi·ªác</span>}
            {!isShowButtonGD1 &&
              (isEntered ? <span>Quay l·∫°i</span> : <span>Quay l·∫°i</span>)}
          </Button>,
          <Button
            disabled={isHideButton}
            key="submit"
            type="primary"
            onClick={() => {
              if (isShowNextPage2) {
                nextPage2();
              } else if (!isShowNextPage2 && isEntered) {
                save();
              } else if (!isShowNextPage2 && !isEntered) {
                nextPage();
              }
            }}
          >
            {isShowNextPage2 && <span>Ti·∫øp t·ª•c</span>}
            {!isShowNextPage2 &&
              (isEntered ? (
                <span>N·ªôp h·ªì s∆° xin vi·ªác</span>
              ) : (
                <span>Ti·∫øp t·ª•c</span>
              ))}
          </Button>,
        ]}
      >
        {isShowApply ? (
          <Fragment>
            <div className="radio-btn-container" style={{ display: "flex" }}>
              <RadioButton
                changed={radioChangeHandler}
                id="1"
                isSelected={cvMethod === "1"}
                label="T·∫£i t·ª´ m√°y t√≠nh c·ªßa b·∫°n"
                value="1"
              />

              <RadioButton
                changed={radioChangeHandler}
                id="2"
                isSelected={cvMethod === "0"}
                label="H·ªì s∆° online"
                value="0"
              />
            </div>
            {!cvMethod && (
              <span className="text-danger">Vui l√≤ng ch·ªçn th√¥ng tin sau</span>
            )}
            {cvMethod === "1" && (
              <Fragment>
                <div className="container">
                  <div className="card border-0">
                    <div className="drop_box">
                      <header>
                        <h4>Ch·ªçn file t·∫°i ƒë√¢y</h4>
                      </header>
                      <p>T·ªáp ƒë∆∞·ª£c h·ªó tr·ª£: PDF</p>
                      <input
                        type="file"
                        hidden
                        accept=".pdf"
                        id="fileID"
                        style={{ display: "none" }}
                        onChange={handleChange}
                        ref={inputFile}
                      />
                      <button
                        label="fileID"
                        className="btn"
                        onClick={() => inputFile.current.click()}
                      >
                        Click ƒë·ªÉ t·∫£i h·ªì s∆° l√™n
                      </button>
                    </div>
                    <div>
                      {isShowFileName && (
                        <>
                          <div>
                            <strong>T·ªáp ƒë√£ t·∫£i l√™n:</strong>{" "}
                          </div>
                          <Tag
                            style={{ width: "100%" }}
                            className="rounded d-block py-2 fs-16"
                            closable
                            onClose={() => {
                              console.log("Click delete api");
                              // setFile(file.filter((fil) => fil?.name !== x?.name));
                            }}
                          >
                            {file?.name}
                          </Tag>
                        </>
                      )}
                    </div>
                  </div>
                </div>
              </Fragment>
            )}
            {/* <h2 style={{ marginTop: "25px" }}>B·∫°n ch·ªçn: {cvMethod}</h2> */}
          </Fragment>
        ) : !isEntered ? (
          <Fragment>
            {/* Hi·ªÉn th·ªã giao di·ªán 2 */}
            <div className="pb-2">
              <p>
                <strong>
                  Th√¥ng tin gi√∫p nh√† tuy·ªÉn d·ª•ng c√≥ th·ªÉ k·∫øt n·ªëi t·ªõi b·∫°n nhanh
                  nh·∫•t ngay sau khi ·ª©ng tuy·ªÉn
                </strong>
              </p>
            </div>
            <div className="pb-2">
              <p>
                <strong>H·ªç t√™n</strong> <span className="text-danger">(*)</span>
              </p>
              <Input
                // showCount
                // maxLength={20}
                size="large"
                placeholder="Trung Vinh"
                value={name}
                // defaultValue={user?.ten}
                onChange={(e) => {
                  const value = e.target.value;
                  setName(value);
                }}
                defaultValue={name}
              />
              <p className="text-danger text-xs text-italic mt-1">
                {validationMsg.name}
              </p>
            </div>
            <div className="pb-2">
              <p>
                <strong>S·ªë ƒëi·ªán tho·∫°i</strong>{" "}
                <span className="text-danger">(*)</span>
              </p>
              <Input
                // showCount
                // maxLength={20}
                value={phone}
                onChange={(e) => {
                  const value = e.target.value;
                  setPhone(value);
                }}
                size="large"
                placeholder="0987079079"
                defaultValue={phone}
              />
              <p className="text-danger text-xs text-italic mt-1">
                {validationMsg.phone}
              </p>
            </div>
            <div className="pb-2">
              <p>
                <strong>ƒê·ªãa ch·ªâ email</strong>{" "}
                <span className="text-danger">(*)</span>
              </p>
              <Input
                // showCount
                // maxLength={20}
                value={email}
                onChange={(e) => {
                  const value = e.target.value;
                  setEmail(value);
                }}
                size="large"
                placeholder="zunggzing@gmail.com"
                defaultValue={email}
              />
              <p className="text-danger text-xs text-italic mt-1">
                {validationMsg.email}
              </p>
            </div>
            <div className="pb-2">
              <p>
                <strong>Gi·ªõi thi·ªáu v·ªÅ b·∫£n th√¢n</strong>{" "}
              </p>
              <TextArea
                showCount
                maxLength={500}
                style={{ height: 120 }}
                value={introduce}
                onChange={(e) => {
                  const value = e.target.value;
                  setIntroduce(value);
                }}
                defaultValue={introduce}
              />
            </div>
            <div className="pb-2">
              <p>
                <strong>
                  G·∫∑p v·∫•n ƒë·ªÅ v·ªõi ·ª©ng tuy·ªÉn n√†y? Vui l√≤ng cho ch√∫ng t√¥i bi·∫øt th√™m
                  0987099099
                </strong>{" "}
              </p>
            </div>{" "}
          </Fragment>
        ) : (
          <Fragment>
            {/* Hi·ªÉn th·ªã giao di·ªán xem l·∫°i th√¥ng tin */}
            <div className="pb-1">
              <p>
                <strong>
                  H√£y xem l·∫°i h·ªì s∆° xin vi·ªác c·ªßa b·∫°n ƒë·ªÉ ch·∫Øc ch·∫Øc c√°c th√¥ng tin
                  d∆∞·ªõi l√† ch√≠nh x√°c c·ªßa b·∫°n.
                </strong>
              </p>
            </div>
            <div className="pb-2">
              <div className="d-flex align-items-center justify-content-between">
                <div>
                  <strong>Th√¥ng tin li√™n l·∫°c</strong>
                </div>
                {isEntered && (
                  <div
                    className="cursor-pointer"
                    onClick={() => {
                      setIsEntered(false);
                    }}
                  >
                    <span className="pointer">
                      <AiFillEdit /> S·ª≠a
                    </span>
                  </div>
                )}
              </div>
            </div>
            <div className="pb-2">
              <div className="row">
                <div className="col-12">
                  <ul className="list-group">
                    <li className="list-group-item">
                      <div>
                        <strong>H·ªç t√™n</strong>
                      </div>
                      <div>
                        <span>{name}</span>
                      </div>
                    </li>
                    <li className="list-group-item">
                      <div>
                        <strong>ƒê·ªãa ch·ªâ email</strong>
                      </div>
                      <div>
                        <span>{email}</span>
                      </div>
                    </li>
                    <li className="list-group-item">
                      <div>
                        <strong>S·ªë ƒëi·ªán tho·∫°i</strong>
                      </div>
                      <div>
                        <span>{phone}</span>
                      </div>
                    </li>
                    <li className="list-group-item">
                      <div>
                        <strong>Gi·ªõi thi·ªáu v·ªÅ b·∫£n th√¢n</strong>
                      </div>
                      <div>
                        <span>{introduce}</span>
                      </div>
                    </li>
                  </ul>
                </div>
                <div className="col-12 mt-1">
                  <Checkbox
                    onChange={(e) => {
                      console.log(`checked = ${e.target.checked}`);
                      setIsSendEmail(e.target.checked);
                    }}
                  >
                    Th√¥ng b√°o cho t√¥i qua email khi c√≥ vi·ªác l√†m t∆∞∆°ng t·ª±
                  </Checkbox>
                </div>
                <div className="col-12 mt-2">
                  <p>
                    B·∫±ng c√°ch n·ªôp h·ªì s∆°, b·∫°n ƒë·ªìng √Ω v·ªõi ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng v√†
                    Ch√≠nh S√°ch B·∫£o M·∫≠t c·ªßa 123job.vn c≈©ng nh∆∞ ƒë∆°n ƒëƒÉng k√Ω c·ªßa
                    b·∫°n ƒë∆∞·ª£c g·ª≠i ƒë·∫øn Nh√† tuy·ªÉn d·ª•ng v√† ƒë∆∞·ª£c x·ª≠ l√Ω theo ch√≠nh
                    s√°ch b·∫£o m·∫≠t c·ªßa Nh√† tuy·ªÉn d·ª•ng.
                  </p>
                </div>
                <div className="col-12">
                  <p>
                    G·∫∑p v·∫•n ƒë·ªÅ v·ªõi ·ª©ng tuy·ªÉn n√†y? Vui l√≤ng cho ch√∫ng t√¥i bi·∫øt
                    th√™m 0987999000
                  </p>
                </div>
              </div>
            </div>
          </Fragment>
        )}
        {/* Modal 1 */}

        {/* {} */}
        {/* Modal 1 */}
      </Modal>
    </div>
  );
};

ApplyJobModal.propTypes = {};

export default ApplyJobModal;
